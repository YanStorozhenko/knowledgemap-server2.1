import {
    Controller,
    Post,
    Body,
    Get,
    UseGuards,
    Req,
    BadRequestException,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersService } from '../users/users.service';
import { CreateUserDto } from '../users/dtos/create-user.dto';
import { FirebaseAuthGuard } from './firebase-auth.guard';
import { ApiBearerAuth } from '@nestjs/swagger';
import { Request } from 'express';

@ApiBearerAuth('access-token')
@Controller('auth')
export class AuthController {
    constructor(
        private readonly authService: AuthService,
        private readonly usersService: UsersService
    ) {}

    // üîê –¢–µ—Å—Ç–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ Swagger
    @Post('register-admin')
    async registerAdmin() {
        return this.authService.createAdmin();
    }

    // üîê –ó–∞—Ö–∏—â–µ–Ω–∏–π –µ–Ω–¥–ø–æ–π–Ω—Ç ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Firebase
    @UseGuards(FirebaseAuthGuard)
    @Get('protected')
    getProtected(@Req() req: Request) {
        return {
            message: '‚úÖ Access granted (Firebase Token Valid)',
            user: req.user, // —Ü–µ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–∏–π Firebase —Ç–æ–∫–µ–Ω (uid, email —Ç–æ—â–æ)
        };
    }

    // ‚úÖ –û–ø—Ü—ñ–π–Ω–∞ —Ä—É—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–µ—Ä–µ–∑ email)
    @Post('register')
    async register(@Body() createUserDto: CreateUserDto) {
        const existingUser = await this.usersService.findByEmail(createUserDto.email);
        if (existingUser) {
            throw new BadRequestException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î!');
        }
        return this.usersService.create(createUserDto);
    }
}
