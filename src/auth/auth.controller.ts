import {
    Controller,
    Post,
    Body,
    Get,
    UseGuards,
    Req,
    BadRequestException,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersService } from '../users/users.service';
import { CreateUserDto } from '../users/dtos/create-user.dto';
import { JwtAuthGuard } from './jwt-auth.guard';
import { ApiBearerAuth } from '@nestjs/swagger';

@ApiBearerAuth('access-token')
@Controller('auth')
export class AuthController {
    constructor(
        private readonly authService: AuthService,
        private readonly usersService: UsersService
    ) {}

    // üîê –¢–µ—Å—Ç–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ Swagger
    @Post('register-admin')
    async registerAdmin() {
        return this.authService.createAdmin();
    }

    // üîê –ó–∞—Ö–∏—â–µ–Ω–∏–π –µ–Ω–¥–ø–æ–π–Ω—Ç ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    @UseGuards(JwtAuthGuard)
    @Get('protected')
    getProtected(@Req() req) {
        return { message: 'Access granted', user: req.user };
    }

    // ‚ùå –ü–∞—Ä–æ–ª—å–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ
    @Post('register')
    async register(@Body() createUserDto: CreateUserDto) {
        const existingUser = await this.usersService.findByEmail(createUserDto.email);
        if (existingUser) {
            throw new BadRequestException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î!');
        }
        return this.usersService.create(createUserDto);
    }
}
