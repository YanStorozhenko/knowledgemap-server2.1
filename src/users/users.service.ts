import {
    Injectable,
    NotFoundException,
    ConflictException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, ILike } from 'typeorm';
import { User } from './entities/user.entity';
import { UpdateUserDto } from './dtos/update-user.dto';
import { CreateUserDto } from './dtos/create-user.dto';

@Injectable()
export class UsersService {
    constructor(
        @InjectRepository(User)
        private readonly usersRepository: Repository<User>,
    ) {}

    /**
     * üîπ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async create(createUserDto: Partial<User>): Promise<User> {
        if (createUserDto.email) {
            const existingUser = await this.findByEmail(createUserDto.email);
            if (existingUser) {
                throw new ConflictException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ email ${createUserDto.email} –≤–∂–µ —ñ—Å–Ω—É—î.`);
            }
        }




        const newUser = this.usersRepository.create(createUserDto);
        return await this.usersRepository.save(newUser);
    }

    /**
     * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
     */
    async findAll(): Promise<User[]> {

        console.log("FIND ALL");

        return await this.usersRepository.find();
    }

    /**
     * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID.
     */
    // async findOne(id: number): Promise<User> {
    //     const user = await this.usersRepository.findOne({ where: { id } });
    //     if (!user) {
    //         throw new NotFoundException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    //     }
    //     return user;
    // }

    // /**
    //  * üîπ –ü—É–±–ª—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    //  */
    // async findPublicUserById(id: number): Promise<Pick<User, 'id' | 'email' | 'role'> | null> {
    //     return this.usersRepository.findOne({
    //         where: { id },
    //         select: ['id', 'email', 'role'],
    //     });
    // }

    /**
     * üîπ –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email.
     */
    async findByEmail(email: string): Promise<User | null> {
        return await this.usersRepository.findOne({ where: { email } });
    }


    /**
     * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Firebase UID (–¥–ª—è /me).
     */
    async findByFirebaseUid(uid: string): Promise<Pick<User, 'email' | 'name' | 'role'> | null> {
        const user = await this.usersRepository.findOne({
            where: { firebase_uid: uid },
            select: ['email', 'name', 'role'],
        });

        if (!user) {console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ'); return null;}

        return user ;
    }


    /**
     * üîπ –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É).
     */
    async findUserForAuth(email: string): Promise<User | null> {
        return this.usersRepository.findOne({
            where: { email },
            select: ['id', 'email', 'role', 'name'],
        });
    }

    /**
     * üîπ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     */
    // async update(id: number, updateUserDto: UpdateUserDto): Promise<User> {
    //     const user = await this.findOne(id);
    //     await this.usersRepository.update(id, updateUserDto);
    //     return this.findOne(id);
    // }

    /**
     * üîπ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     */
    // async remove(id: number): Promise<{ message: string }> {
    //     const user = await this.findOne(id);
    //     await this.usersRepository.delete(id);
    //     return { message: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.email} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.` };
    // }

    /**
     * üîπ –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–æ–ª—è–º–∏ (–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º).
     */
    async search(query: any): Promise<{ data: User[]; total: number; page: number; limit: number }> {
        const where: any = {};

        if (query.name) {
            where.name = ILike(`%${query.name}%`);
        }

        if (query.email) {
            where.email = ILike(`%${query.email}%`);
        }

        if (query.role) {
            where.role = query.role;
        }

        const page = query.page ? Math.max(1, Number(query.page)) : 1;
        const limit = query.limit ? Math.max(1, Number(query.limit)) : 10;
        const skip = (page - 1) * limit;

        const sortBy = query.sortBy || 'id';
        const sortOrder = query.sortOrder === 'DESC' ? 'DESC' : 'ASC';

        const [data, total] = await this.usersRepository.findAndCount({
            where,
            order: { [sortBy]: sortOrder },
            take: limit,
            skip,
        });

        return {
            data,
            total,
            page,
            limit,
        };
    }
}
